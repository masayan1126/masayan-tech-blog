---
import FormattedDate from "@/components/FormattedDate.astro";
import "@fontsource-variable/noto-sans-jp";
import BaseLayout from "@/layouts/BaseLayout.astro";
import BlogCategoryBadgeGroup from "@/features/Blog/BlogCategoryBadgeGroup";
import { getArticlesByCategory } from "@/libs/microcms/blog";
import Link from "@/components/Link/Link.astro";
import buildFilter from "@/libs/microcms/buildFilter";
import { Icon } from "astro-icon";
import { BlogListLink } from "@/features/Blog/List/BlogListLink";
import BlogDetailProfileCard from "@/features/Blog/Detail/BlogDetailProfileCard.astro";
import { SITE_DOMAIN } from "@/constants/url";
import { ARTICLES_PATH } from "@/features/Blog/List/constants/path";
import type { Article } from "@/libs/microcms/blog";

type Props = Article;

const { title, description, publishedAt, eyecatch, category } = Astro.props;
const { slug } = Astro.params;

const catetoryIds = category.map(({ id }) => id);
const filter = buildFilter("categoryId", catetoryIds);
const relatedPostsRes = await getArticlesByCategory(filter);
const relatedRandomPosts = [...relatedPostsRes.contents].sort(() => {
  return Math.random() - 0.5;
});

const breadCrumbsList = [
  {
    name: "„Éñ„É≠„Ç∞Ë®ò‰∫ã‰∏ÄË¶ß",
    path: ARTICLES_PATH,
  },
  {
    name: title,
    path: `/blog/${slug}/`,
  },
];
---

<BaseLayout
  {title}
  {description}
  context={"blog"}
  heroImage={eyecatch.url}
  {breadCrumbsList}
>
  <div class="blog-detail-wrapper">
    <div class="main">
      <div class="blog-detail-header">
        <h1 class="article-title">
          {title}
        </h1>

        <div>
          ÂÖ¨ÈñãÊó•
          <FormattedDate date={new Date(publishedAt)} />

          <!-- {
            updatedDate && (
              <div class="last-updated-on">
                <FormattedDate date={updatedDate} />
              </div>
            )
          } -->
        </div>
      </div>
      <article>
        <slot />
      </article>
    </div>
    <aside>
      <div class="grid gap-20">
        <di>
          <p class="aside-title">„Ç´„ÉÜ„Ç¥„É™</p>
          <div class="flex flex-wrap">
            <BlogCategoryBadgeGroup
              categories={category.map(({ id, name }) => {
                return {
                  id,
                  name,
                };
              })}
            />
          </div>
        </di>
        <div>
          <p class="aside-title">„Åì„ÅÆË®ò‰∫ã„Çí„Ç∑„Çß„Ç¢„Åô„Çã</p>
          <Link
            href={`http://twitter.com/share?url=${SITE_DOMAIN}/blog/${slug}&via=masayanishigaki&text=${title}`}
            target="_blank"
          >
            <Icon name="logos:twitter" class="w-8 inline-block mr-2" />
          </Link>
          <Link
            href={`http://b.hatena.ne.jp/add?mode=confirm&url=${SITE_DOMAIN}/blog/${slug}&title=${title}`}
            target="_blank"
          >
            <Icon
              name="simple-icons:hatenabookmark"
              class="w-8 inline-block mr-2"
            />
          </Link>
        </div>

        <div class="">
          <p class="aside-title">„Éñ„É≠„Ç∞ÁÆ°ÁêÜ‰∫∫</p>
          <BlogDetailProfileCard />
        </div>

        <div>
          <p class="aside-title">Èñ¢ÈÄ£Ë®ò‰∫ã</p>
          <div class="gap-10 grid grid-cols-1">
            {
              relatedRandomPosts.map(
                (post, i) =>
                  i < 16 && (
                    <div>
                      <p class={"mb-2"}>
                        <Link href={`/blog/${post.id}`} color="white">
                          {post.title}
                        </Link>
                      </p>
                      <div>
                        <BlogCategoryBadgeGroup
                          categories={post.category.map((c) => {
                            return {
                              id: c.id,
                              name: c.name,
                            };
                          })}
                        />
                      </div>
                      <div class="mt-3">
                        <BlogListLink
                          href={`/blog/${post.id}/`}
                          className="text-link"
                        >
                          „Åì„ÅÆË®ò‰∫ã„ÇíË™≠„ÇÄ
                        </BlogListLink>
                      </div>
                      <p class="mt-2 text-sm">
                        <FormattedDate date={new Date(post.publishedAt)} />
                      </p>
                    </div>
                  )
              )
            }
          </div>
        </div>
      </div>
    </aside>
  </div>
</BaseLayout>
<!-- MEMO:ÂãïÁöÑ„Å´ÂèñÂæó„Åó„ÅüË®ò‰∫ã„ÅÆ„Çø„Ç∞„Å´„Çπ„Çø„Ç§„É´„ÇíÂΩì„Å¶„Çã„Å´„ÅØ„ÄÅgloba„Å´„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã -->
<style is:global>
  article {
    width: 100%;
    overflow-x: scroll;
  }

  article h1::before {
    content: "üî•";
  }

  .article-title {
    @apply text-xl sm:text-2xl md:text-3xl font-bold mb-2 inline-block;
  }

  .toc-title {
    @apply text-2xl font-bold mt-14 mb-2;
  }

  .toc-title::before {
    content: "üöÄ";
    padding-right: 5px;
  }

  article h2 {
    @apply text-2xl font-bold mt-14 mb-2;
  }

  article h2::before {
    content: "üöÄ";
    padding-right: 5px;
  }

  article h3 {
    @apply text-lg font-bold mt-8 mb-2;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 8px;
  }

  article h4 {
    @apply font-bold mt-8 mb-2;
  }

  article p {
    @apply m-0;
  }

  article iframe {
    @apply mt-2;
  }

  article img {
    @apply my-4;
    border-radius: 5px;
    box-shadow: 1px 1px 1px rgba(20, 20, 20, 0.4);
  }

  article ul {
    @apply list-disc px-8 py-4;
  }

  article ol {
    @apply list-decimal px-8 py-4;
  }

  article pre {
    @apply mt-4 mb-10;
    box-shadow: 2px 2px 2px rgba(20, 20, 20, 0.4);
  }

  article a {
    color: rgb(146, 180, 237);
    padding: 10px 0;
  }

  article p:has(.warning) {
    background-color: rgb(231, 186, 186);
    padding: 30px;
    border-radius: 5px;
    color: rgb(0, 0, 0);
  }

  article .iframely-embed {
    @apply my-6;
  }

  article th {
    background-color: #181818;
  }
</style>

<style>
  .blog-detail-wrapper {
    min-height: 100vh;
    width: 100%;
    display: grid;
    grid-template:
      "blog-detail-header blog-detail-header blog-detail-header" 50px
      "center center right " 1fr
      "footer footer footer" 100px
      / auto 1fr 250px;
    grid-gap: 10px 100px;
  }

  .blog-detail-header {
    grid-area: blog-detail-header;
  }

  .main {
    grid-area: center;
  }

  nav {
    grid-area: left;
  }

  aside {
    grid-area: right;
  }

  .aside-title {
    @apply text-xl font-bold mb-4;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 8px;
  }

  .footer {
    grid-area: footer;
  }

  @media (max-width: 1024px) {
    .blog-detail-wrapper {
      grid-template:
        "blog-detail-header blog-detail-header blog-detail-header" 70px
        "center center center " 1fr
        "right  right  right " auto
        / 1fr;
      grid-gap: 10px 100px;
    }
  }
</style>
