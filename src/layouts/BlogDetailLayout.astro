---
import FormattedDate from "@/components/FormattedDate.astro";
import "@fontsource-variable/noto-sans-jp";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { Image } from "@astrojs/image/components";
import BlogCategoryBadgeGroup from "@/features/Blog/BlogCategoryBadgeGroup.astro";
import type { BlogCategory } from "@/libs/microcms/blogCategory";
import { getBlogsByCategory } from "@/libs/microcms/blog";
import Link from "@/components/Link/Link.astro";
import buildFilter from "@/libs/microcms/buildFilter";

type Props = {
  title: string;
  description: string;
  pubDate: Date;
  updatedDate?: Date;
  heroImage?: string;
  categories: BlogCategory[];
};

const { title, description, pubDate, updatedDate, heroImage, categories } =
  Astro.props;

const catetoryIds = categories.map(({ id }) => id);
const filter = buildFilter("categoryId", catetoryIds);
const relatedPostsRes = await getBlogsByCategory(filter);
const relatedRandomPosts = [...relatedPostsRes.contents].sort(() => {
  return Math.random() - 0.5;
});
---

<BaseLayout {title} {description} context={"blog"}>
  <div class="blog-detail-wrapper">
    <div class="blog-detail-header">
      <h1 class="title text-3xl font-bold mb-2 inline-block">
        {title}
      </h1>

      <div>
        <FormattedDate date={pubDate} />

        {
          updatedDate && (
            <div class="last-updated-on">
              Last updated on <FormattedDate date={updatedDate} />
            </div>
          )
        }
      </div>
    </div>
    <div class="main">
      <article>
        {
          heroImage && (
            <Image
              class={"w-full"}
              src={heroImage}
              width={512}
              height={288}
              alt={title}
              format="avif"
            />
          )
        }
        <slot />
      </article>
    </div>
    <aside>
      <div class="grid gap-10">
        <div>
          <p class="aside-title">カテゴリ</p>
          <div class="flex flex-wrap gap-2">
            <BlogCategoryBadgeGroup
              clickable={true}
              categories={categories.map(({ id, name }) => {
                return {
                  id,
                  name,
                };
              })}
            />
          </div>
        </div>
        <div>
          <p class="aside-title">関連記事</p>
          <div class="gap-10 grid grid-cols-1">
            {
              relatedRandomPosts.map(
                (post, i) =>
                  i < 16 && (
                    <div>
                      <Link href={`/blog/${post.id}`} color="white">
                        {post.title}
                      </Link>
                      <p class="mt-2 text-sm">
                        <FormattedDate date={new Date(post.publishedAt)} />
                      </p>
                    </div>
                  )
              )
            }
          </div>
        </div>
      </div>
    </aside>
  </div>
</BaseLayout>

<!-- MEMO:動的に取得した記事のタグにスタイルを当てるには、globaにする必要がある -->
<style is:global>
  article h1::before {
    content: "🔥";
  }

  article h2 {
    @apply text-2xl font-bold mt-14 mb-2;
  }

  article h2::before {
    content: "🚀";
    padding-right: 5px;
  }

  article h3 {
    @apply text-lg font-bold mt-8 mb-2;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 8px;
  }

  article h4 {
    @apply font-bold mt-8 mb-2;
  }

  article p {
    @apply m-0;
  }

  article iframe {
    @apply mt-2;
  }

  article img {
    @apply my-4;
    border-radius: 5px;
    box-shadow: 2px 2px 2px rgba(20, 20, 20, 0.4);
  }

  article ul {
    @apply list-disc px-8 py-4;
  }

  article ol {
    @apply list-decimal px-8 py-4;
  }

  article pre {
    @apply mt-4 mb-10;
    box-shadow: 2px 2px 2px rgba(20, 20, 20, 0.4);
  }
</style>

<style>
  .blog-detail-wrapper {
    min-height: 100vh;
    width: 100%;
    display: grid;
    grid-template:
      "blog-detail-header blog-detail-header blog-detail-header" 50px
      "center center right " 1fr
      "footer footer footer" 100px
      / auto 1fr 250px;
    grid-gap: 10px 100px;
  }

  .blog-detail-header {
    grid-area: blog-detail-header;
  }

  .main {
    grid-area: center;
  }

  nav {
    grid-area: left;
  }

  aside {
    grid-area: right;
  }

  .aside-title {
    @apply text-xl font-bold mb-2;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 8px;
  }

  .footer {
    grid-area: footer;
  }

  @media (max-width: 1024px) {
    .blog-detail-wrapper {
      grid-template:
        "blog-detail-header blog-detail-header blog-detail-header" 70px
        "center center center " 1fr
        "right  right  right " auto
        / 1fr;
      grid-gap: 70px 100px;
    }
  }
</style>
